자바프로젝트를 만든 후 Configure-convert to maven project를 한다.

spring을 적용시키기 위해 pom.xml에서 dependencies 안에 dependency를 추가하는데
이 것은 mvnrepository에서 spring-core와 spring-context를 추가하면된다. 
<dependencies>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>5.2.3.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.2.3.RELEASE</version>
		</dependency>
</dependencies>


동적 바인딩 : 실제 주소는 부모객체에 있지만 자식객체로 실행됨.(인터페이스에서 상속받았을 때 사용)


스프링이 bean을 통해 객체를 생성하는 형태

(XmlBeanFactory는 비추천)
1. BeanFactory + FileSystemResource("주소 및 파일 명");

Resource res = new FileSystemResource("com/test03/beans.xml");
BeanFactory factory = new XmlBeanFactory(res);

2. BeanFactory + ClassPathResource("주소 및 파일 명");

Resource res = new ClassPathResource("com/test03/beans.xml");
BeanFactory factory = new XmlBeanFactory(res);

3. ApplicationContext (BeanFactory 인터페이스를 상속받음)
=> beanfactory와 유사하지만 더 다양한 기능을 제공한다.

ApplicationContext factory = new ClassPathXmlApplicationContext("com/test03/beans.xml");

객체명 이름 = (객체명 강제형변환)factory.getBean("id명");
			   or    factory.getBean("id명",객체명.Class);


bean에서 객체를 만들 때 처음 들어가는 값은 기본 생성자에 값을 지정해뒀으면 그 값으로 설정된다.

bean 객체에서 생성자를 통해 만들 때에는 반드시 순서를 고려해서 만들어야한다.
첫번째가 name, 두번째가 cost이므로 순서대로 apple, 10000을 설정한다.
value는 constructor안에 value를 따로 만들어 지정하거나 constructor에 설정하면 된다.

<bean id="apple" class="com.test01.MessageBeanImpl">
		<constructor-arg>
			<value>apple</value>
		</constructor-arg>
		<constructor-arg value="10000"></constructor-arg>
</bean>

혹은 <constructor-arg index="0" value="mango"></constructor-arg>
이런식으로 index를 부여하여 순서를 정해도 된다.

property와 constructor-arg의 차이는
property는 setter메소드를 이용하기 때문에 java파일안에 setter가 없으면 사용 불가이고
constructor-arg는 매개변수 지정해주는 것이기때문에 생성자가 없는 java파일엔 사용 불가.

bean factory-method는 동적으로 객체를 생성하는 것을 의미한다(switch문에서 어떤 것을 선택하냐에 따라 그 값을 통해
해당 객체를 생성하는 것을 의미)

상속을 받았으면 bean에서 그 객체를 class로 지정할 때 constructor-arg로 그 값을 지정해야한다.

<constructor-arg 안에 ref ="id명">  ==> id를 참조해서 값 혹은 객체 단위를 참조할 수 있다.

bean spring xml 파일의 하단에 Namespaces를 보면 c와 p가 있는데 각각 constructor와 property의 약자이고

매개변수를 써서 각각의 값을 지정해줄 수 있다.
<bean id="lee" class="com.test05.Emp" c:name="이순신" c:salary="3000000"></bean>
<bean id="leess" class="com.test05.Developer" c:emp-ref="lee" c:dept="개발팀"></bean>

<bean id="hong" class="com.test05.Emp" p:name="홍길동" p:salary="2500000"></bean>
<bean id="honggd" class="com.test05.Engineer" p:emp-ref="hong" p:dept="기술팀"></bean>

원래 bean은 프로그램이 시작하면 최초에 생성하게 되는데 lazy-init=true로 지정하면 자신의 순서가 왔을 때 생성하게 된다.
이것을 게으른 초기화라고도 한다.

<bean id="samsung" class="com.test07.SamsungTV" lazy-init="true"></bean>

실제로 bean 관련 객체를 밑에 만들었어도 만들어지는 것은 제일 먼저 만들어진다.



----------------------------------------------------------------------------------------------------------------------


namespace에서 c와 p
우리가 아는 constructor-arg랑 property를 의미함.

사용으로는 c:변수명="id값" (p도 마찬가지)


프로그램 순서

=> bean 객체 우선 생성(생성 순서는 메인페이지의 순서대로)

생성 다 하고나서 위에서부터 순차적으로 진행.

만약 lazy-init = true라고하면
최초에 기본생성자가 만들어지는 것과 달리 순차적으로 본인 차례가 왔을 때 생성하고 코드를 진행한다.

자바파일에서 기본생성자를 통해 초기화를 했어도 만약 xml에서 constructor-arg를 통해 초기화했다면

자바파일의 기본생성자를 통해 초기화가 되지 않는다.

property는 setter메소드, constructor-arg는 생성자를 통해 초기화해주는 애임.

숫자를 호출하려할 때 <property name="number" value="3"></property>

array를 호출하려할 때
<property name="array">
			<array>
				<value>홍길동</value>
				<value>이순신</value>
				<value>김유신</value>
				<value>유관순</value>
			</array>
</property>

list를 호출하려할 때
<property name="list">
			<list>
				<value>봄</value>
				<value>여름</value>
				<value>가을</value>
				<value>겨울</value>
			</list>
</property>

map을 호출하려할 때

<property name="map">
			<map>
				<entry>
					<key>
						<value>1</value>
					</key>
					<value>봄</value>
				</entry>
				<entry key="2" value="여름" />
			</map>
</property>

key의 value값과 value값으로 써도 되고 entry의 key값 value값을 지정해줘도 된다.

생성된 bean을 참조하여 list에 추가하려면
<list> 안에 <ref bean="score">   ==> score는 참조될 bean의 id이다.


autowire를 이용하면 편하게 끌어 쓸 수 있음.
autowire="byName"으로 하면 id/name이 setter와 이름이 같다면 bean으로 자동 할당 됨.

autowire="byType"으로 하면 setter의 parameter와 같은 type의 bean이 있다면 자동 할당 됨.
==> 하지만 같은 타입으로 된 애가 0 혹은 2개이상이면 넣어야할 위치에 넣을 대상이 명확하지 않아서 에러 발생.

autowire="constructor"으로 하면 생성자의 parameter와 같은 type의 bean이 있으면 자동 할당됨. id나 name으로 호출
==> 이 것도 id나 name이 부정확한 이름으로 되어있다면 null값으로 되는 경우가 생김
(아마 부정확한 값이 있다면 계산 자체를 안해버리는게 있는 듯)



context:component-scan을 통해서 따로 bean을 생성하지 않아도 각 클래스 위에 @Component를 선언함으로써 
능동적으로 찾아서 객체를 생성함.


<context:annotation-config />는 현재 선언된 bean을 토대로 스캔해서 능동적으로 객체를 생성.
찾아보니까 component-scan이 annotation-config보다 상위호환인듯.
=>@Autowired은 자동 주입 대상 위에 써준다.
만약 객체가 여러개라 오류가 뜬다면 @Qualifier("bean의 id")를 써서 지정해주면 된다.

@Component("samsung") => Component 스캔의 대상이 되면서 만약되면 bean의 id는 samsung으로 하겠다라는 의미.






Spring Annotation
-어노테이션은 자바1.5부터 지원합니다
-스프링은 어노테이션을 이용하여 빈과 관련된 정보를 설정할 수 있다.

bean의 갯수가 많아지면 너무 길어짐

Spring web mvc framework - annotation의 사용을 통해 설정 파일을 간결화 할 수 있다.

-4개의 stereotype annotation(component-scan에 의해서 자동으로 등록)
@Component : stereotype annotation의 조상 
@Controller : Spring MVC에서 컨트롤러로 인식
@Service : 역할 부여 없이 스캔대상이 된다. 비즈니스클래스(biz)에 사용
@Repository : 일반적으로 dao에 사용.


1. @Component

클래스에 선언, 해당 클래스를 자동으로 bean으로 등록
bean의 이름은 해당 클래스명(첫글자는 소문자)
범위는 디폴트로 singleton

2. @Autowired
spring에서 의존관계를 자동으로 설정할 때 사용된다.
생성자, 필드, 메서드 세 곳에서 모두 적용 가능, 타입을 이용한 프로퍼티 자동 설정기능 제공.
해당 타입의 bean이 없거나 2개 이상일 경우 예외 발생
같은 타입의 bean이 2개 이상 존재 할 때 예외가 발생하는데, @Qualifier를 사용하면 동일한 타입의 bean 중에서
특정 bean을 사용하도록 해서 문제를 해결 가능
@Autowired
@Qualifier("test")
private Test test; // btType -> byName

3. Qualifier
@Autowired에서 2개 이상의 동일타입 bean 객체가 존재하면 특정 bean을 사용하도록 선언

4. @Required
필수 프로퍼티임을 명시. 프로퍼티 설정 메소드(setter)에 붙이면 된다.
필수 프로퍼티를 설정하지 않을 경우 bean 생성 시 예외 발생

5. @Repository
dao에 사용

6. @Service
비즈니스 로직(biz)으로 등록

7. @Resource
어플리케이션에서 필요로 하는 리소스를 자동 연결 시 사용
name 속성에 자동으로 연결 될 bean 객체의 이름을 입력
@Resource(name="testDao") // byName -> byType