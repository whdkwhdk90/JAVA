자바프로젝트를 만든 후 Configure-convert to maven project를 한다.

spring을 적용시키기 위해 pom.xml에서 dependencies 안에 dependency를 추가하는데
이 것은 mvnrepository에서 spring-core와 spring-context를 추가하면된다. 
<dependencies>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>5.2.3.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.2.3.RELEASE</version>
		</dependency>
</dependencies>


동적 바인딩 : 실제 주소는 부모객체에 있지만 자식객체로 실행됨.(인터페이스에서 상속받았을 때 사용)


스프링이 bean을 통해 객체를 생성하는 형태

(XmlBeanFactory는 비추천)
1. BeanFactory + FileSystemResource("주소 및 파일 명");

Resource res = new FileSystemResource("com/test03/beans.xml");
BeanFactory factory = new XmlBeanFactory(res);

2. BeanFactory + ClassPathResource("주소 및 파일 명");

Resource res = new ClassPathResource("com/test03/beans.xml");
BeanFactory factory = new XmlBeanFactory(res);

3. ApplicationContext (BeanFactory 인터페이스를 상속받음)
=> beanfactory와 유사하지만 더 다양한 기능을 제공한다.

ApplicationContext factory = new ClassPathXmlApplicationContext("com/test03/beans.xml");

객체명 이름 = (객체명 강제형변환)factory.getBean("id명");
			   or    factory.getBean("id명",객체명.Class);


bean에서 객체를 만들 때 처음 들어가는 값은 기본 생성자에 값을 지정해뒀으면 그 값으로 설정된다.

bean 객체에서 생성자를 통해 만들 때에는 반드시 순서를 고려해서 만들어야한다.
첫번째가 name, 두번째가 cost이므로 순서대로 apple, 10000을 설정한다.
value는 constructor안에 value를 따로 만들어 지정하거나 constructor에 설정하면 된다.

<bean id="apple" class="com.test01.MessageBeanImpl">
		<constructor-arg>
			<value>apple</value>
		</constructor-arg>
		<constructor-arg value="10000"></constructor-arg>
</bean>

혹은 <constructor-arg index="0" value="mango"></constructor-arg>
이런식으로 index를 부여하여 순서를 정해도 된다.

property와 constructor-arg의 차이는
property는 setter메소드를 이용하기 때문에 java파일안에 setter가 없으면 사용 불가이고
constructor-arg는 매개변수 지정해주는 것이기때문에 생성자가 없는 java파일엔 사용 불가.

bean factory-method는 동적으로 객체를 생성하는 것을 의미한다(switch문에서 어떤 것을 선택하냐에 따라 그 값을 통해
해당 객체를 생성하는 것을 의미)

상속을 받았으면 bean에서 그 객체를 class로 지정할 때 constructor-arg로 그 값을 지정해야한다.

<constructor-arg 안에 ref ="id명">  ==> id를 참조해서 값 혹은 객체 단위를 참조할 수 있다.

bean spring xml 파일의 하단에 Namespaces를 보면 c와 p가 있는데 각각 constructor와 property의 약자이고

매개변수를 써서 각각의 값을 지정해줄 수 있다.
<bean id="lee" class="com.test05.Emp" c:name="이순신" c:salary="3000000"></bean>
<bean id="leess" class="com.test05.Developer" c:emp-ref="lee" c:dept="개발팀"></bean>

<bean id="hong" class="com.test05.Emp" p:name="홍길동" p:salary="2500000"></bean>
<bean id="honggd" class="com.test05.Engineer" p:emp-ref="hong" p:dept="기술팀"></bean>

원래 bean은 프로그램이 시작하면 최초에 생성하게 되는데 lazy-init=true로 지정하면 자신의 순서가 왔을 때 생성하게 된다.
이것을 게으른 초기화라고도 한다.

<bean id="samsung" class="com.test07.SamsungTV" lazy-init="true"></bean>

실제로 bean 관련 객체를 밑에 만들었어도 만들어지는 것은 제일 먼저 만들어진다.



